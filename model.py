# -*- coding: utf-8 -*-
"""Sentiment_Analysis_ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AIrKzpcfjCCqPi-qEndC5gsQp4uqHX5e

# **Sentiment Analysis Model By Mirza Yasir Abdullah Baig**

## **Step Number 1: Importing the Dependencies**
"""

!pip install kaggle

import os
import json

from zipfile import ZipFile
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, LSTM
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

"""## **Step Number 2: Data Collection- Kaggle API**"""

!pip install kaggle
import os
import json

# Load your kaggle.json
kaggle_dictionary = json.load(open("kaggle.json"))

os.environ["KAGGLE_USERNAME"] = kaggle_dictionary["username"]
os.environ["KAGGLE_KEY"] = kaggle_dictionary["key"]

# Download the IMDB dataset
!kaggle datasets download -d lakshmi25npathi/imdb-dataset-of-50k-movie-reviews

# Unzip the dataset
from zipfile import ZipFile
with ZipFile("imdb-dataset-of-50k-movie-reviews.zip", "r") as zip_ref:
    zip_ref.extractall()

"""## **Step Number 3: Loading the Dataset**"""

import pandas as pd

data = pd.read_csv("/content/IMDB Dataset.csv")
print(data.shape)
data.head()

import re

def clean_text(text):
    text = text.lower()
    text = re.sub(r"<.*?>", "", text)  # remove HTML tags
    text = re.sub(r"[^a-z0-9\s]", "", text)  # remove punctuation
    return text

data["clean_review"] = data["review"].apply(clean_text)
data.head()

from sklearn.model_selection import train_test_split

train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)
print(train_data.shape, test_data.shape)

"""## **Step Number 4: Data Preprocessing**"""

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

max_words = 5000
max_len = 200

tokenizer = Tokenizer(num_words=max_words)
tokenizer.fit_on_texts(train_data["clean_review"])

X_train_seq = tokenizer.texts_to_sequences(train_data["clean_review"])
X_test_seq  = tokenizer.texts_to_sequences(test_data["clean_review"])

X_train_pad = pad_sequences(X_train_seq, maxlen=max_len)
X_test_pad  = pad_sequences(X_test_seq, maxlen=max_len)

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
Y_train_enc = le.fit_transform(train_data["sentiment"])
Y_test_enc  = le.transform(test_data["sentiment"])

# Check distribution
import pandas as pd
pd.Series(Y_train_enc).value_counts()

"""## **Step Number 5: LSTM - Long Short-Term Memory**"""

model = Sequential()
model.add(Embedding(input_dim=max_words, output_dim=128))  # no input_length
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation="sigmoid"))

model.build(input_shape=(None, max_len))
model.summary()

"""## **Step Number 6: Training the Model**"""

history = model.fit(
    X_train_pad,
    Y_train_enc,
    epochs=5,
    batch_size=64,
    validation_split=0.2
)

"""## **Step Number 7: Model Evaluation**"""

loss, accuracy = model.evaluate(X_test_pad, Y_test_enc)
print(f"Test Loss: {loss}")
print(f"Test Accuracy: {accuracy}")

"""## **Step Number 8: Building a Predictive System**"""

def predict_sentiment(review):
    review_clean = clean_text(review)
    seq = tokenizer.texts_to_sequences([review_clean])
    padded_seq = pad_sequences(seq, maxlen=max_len)
    pred = model.predict(padded_seq)
    return "positive" if pred[0][0] > 0.5 else "negative"

# Examples
reviews = [
    "This movie was fantastic. I loved it.",
    "This movie was not that good",
    "This movie was ok but not that good."
]

for r in reviews:
    print(f"Review: {r}")
    print(f"Sentiment: {predict_sentiment(r)}\n")

# example usage
new_review = "This movie was fantastic. I loved it."
sentiment = predict_sentiment(new_review)
print(f"The sentiment of the review is: {sentiment}")

# example usage
new_review = "This movie was not that good"
sentiment = predict_sentiment(new_review)
print(f"The sentiment of the review is: {sentiment}")

# example usage
new_review = "I love romantic movies. wow."
sentiment = predict_sentiment(new_review)
print(f"The sentiment of the review is: {sentiment}")

"""## **Step Number 9: Saving the Trained Model**"""

import pickle

# Save model
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

# Load model
with open("model.pkl", "rb") as f:
    model = pickle.load(f)

model.save("sentiment_model.keras")  # native Keras format

import pickle

with open("tokenizer.pkl", "wb") as f:
    pickle.dump(tokenizer, f)
